version: '1.0.{build}-{branch}'
image: Ubuntu1804
services:
  - docker
cache:
  - 'nuget-package-dir'
#  - '/var/lib/docker/image'
environment:
  RELATIVE_NUGET_PACKAGE_DIR: 'nuget-package-dir/'
  RELATIVE_CS_OUTPUT: 'output/'
  CI_FOLDER: 'CI'
  BUILD_SCRIPT_WITHIN_CONTAINER: 'Build/build.sh'
  
artifacts:
  - path: 'output/bin/*/Release/*.nupkg'
  
init:
  - sh: git config --global core.autocrlf false
  - sh: appveyor UpdateBuild -Version "1.0.${APPVEYOR_BUILD_NUMBER}-${APPVEYOR_REPO_COMMIT0:8}"
install:
#   - sh: git submodule update --init --recursive
  - sh: 'mkdir "${APPVEYOR_BUILD_FOLDER}/git"'
  - sh: 'find "${APPVEYOR_BUILD_FOLDER}" -mindepth 1 -maxdepth 1 -not -name "git" -not -name "nuget-package-dir" -exec mv -t "${APPVEYOR_BUILD_FOLDER}/git" {} +'
# TODO This is run after restoring cache and before starting services. We could modify docker config to use cached image folder here. We would also need to add commands to shut down docker service + chown the folder in after_deploy in order for cache to be able to read from it.
build_script:
  - sh: '"${APPVEYOR_BUILD_FOLDER}/git/${CI_FOLDER}/build.sh"'
  - sh: 'sudo chown -R `id -u` "${APPVEYOR_BUILD_FOLDER}/${RELATIVE_CS_OUTPUT}"'

test_script:
  - sh: '${APPVEYOR_BUILD_FOLDER}/git/${CI_FOLDER}/test.sh'
  
deploy_script:
  - sh: '${APPVEYOR_BUILD_FOLDER}/git/${CI_FOLDER}/deploy.sh'
  
after_deploy:
  - sh: 'sudo chown -R `id -u` "${APPVEYOR_BUILD_FOLDER}/${RELATIVE_NUGET_PACKAGE_DIR}"'
