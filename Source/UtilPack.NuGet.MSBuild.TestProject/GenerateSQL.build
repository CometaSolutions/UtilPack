<Project Sdk="Microsoft.NET.Sdk">
  <!-- This project file demonstrates how to use UtilPack.NuGet.MSBuild task factory. -->
  
  <PropertyGroup>
    <!-- This can be anything, really. The most important thing is to have Sdk property in Project element. -->
    <TargetFramework>netstandard1.0</TargetFramework>
  </PropertyGroup>

  <ItemGroup>
    <!--
    This reference is needed for UtilPackNuGetMSBuildAssemblyPath property.
    The UtilPack.NuGet.MSBuild has no dependencies and no lib folder, so it should be very transparent.
    -->
    <PackageReference Include="UtilPack.NuGet.MSBuild" Version="1.0.0"/>
  </ItemGroup>
  
  <!-- 
    Declare the task.
    Condition, TaskFactory and AssemblyFile attributes should always be the same.
    TaskName attribute should be the full type name of the task class, however it can be overridden inside <Task> element.
    -->
  <UsingTask
    Condition=" '$(UtilPackNuGetMSBuildAssemblyPath)' != '' "
    TaskFactory="UtilPack.NuGet.MSBuild.NuGetTaskRunnerFactory"
    AssemblyFile="$(UtilPackNuGetMSBuildAssemblyPath)"
    TaskName="SQLGenerator.MSBuild.WriteSQLFileTask"
  >
    <Task>
      <NuGetTaskInfo>
        <!-- This element is mandatory, and should be the package ID of the package containing MSBuild task to be executed. -->
        <PackageID>SQLGenerator.MSBuild</PackageID>
        <!-- Optionally specify the version. By default, newest will be used. Note that leaving this out will cause NuGet restore to always scan all sources. -->
        <PackageVersion>1.0.0-RC2</PackageVersion>
        <!-- Optionally specify the assembly path of the task DLL -->
        <!--<AssemblyPath>lib/netstandard1.3/X.Y.dll</AssemblyPath>-->
        <!-- Optionally specify NuGet configuration file -->
        <!-- <NuGetConfigurationFile>path/to/nuget.config</NuGetConfigurationFile> -->
        <!-- Optionally specify the full type name of the task class. By default, the value of TaskName attribute of UsingTask element will be used. -->
        <!-- <TaskName>Some.Other.Class</TaskName> -->
        <!-- Optionally specify the NuGet framework which will act as framework of current process. The NuGet package matches are done against this framework. -->
        <!-- <NuGetFramework>netcoreapp1.1</NuGetFramework> -->
        <!-- In .NET Core, or other package-oriented framework, you can specify the platform NuGet package information as well, if automatic detection fails. -->
        <!-- <NuGetFrameworkPackageID>Microsoft.NETCore.App</NuGetFrameworkPackageID> -->
        <!-- <NuGetFrameworkPackageVersion>1.1.2</NuGetFrameworkPackageVersion> -->
      </NuGetTaskInfo>
    </Task>
  </UsingTask>
  
  <!-- The target for task. -->
  <Target Name="GenerateSQLFile">
    
    <!-- Call the task. -->
    <!-- Use SQLGenerator.PostgreSQL package which contains PostgreSQL SQL dialect. -->
    <!-- Use our generator assembly as loadable assembly since we don't want to publish it to NuGet. -->
    <SQLGenerator.MSBuild.WriteSQLFileTask
      VendorPackageID="SQLGenerator.PostgreSQL"
      VendorPackageVersion="1.0.0-RC2"
      GeneratorAssemblyPath="$(MSBuildThisFileDirectory)\DemoSQLGenerator\bin\Debug\netstandard1.0\DemoSQLGenerator.dll"
      OutputFile="$(MSBuildThisFileDirectory)\output.sql"
    />
  </Target>
</Project>