version: '1.0.{build}-{branch}'
image: Ubuntu1804
services:
  - docker
cache:
  - 'nuget-package-dir'
  - 'v4-ref-assemblies'
#  - 'docker-images'
#  - '/var/lib/docker/image'
environment:
  RELATIVE_NUGET_PACKAGE_DIR: 'nuget-package-dir/'
  RELATIVE_CS_OUTPUT: 'output/'
  CI_FOLDER: 'CI'
  PACKAGE_SCRIPT_WITHIN_CONTAINER: 'Build/package.sh'
  ADDITIONAL_VOLUME_DIRECTORIES: 'v4-ref-assemblies'
#  ASSEMBLY_PREFIX: UtilPack
  DOTNET_VERSION: '2.1'
  DEPLOY_NUGET_SOURCE: 'https://api.nuget.org/v3/index.json'
  ASSEMBLY_SIGN_KEY:
    secure: uv6ZmcDLBG+//mfWJ1eugijJPfTQ+olueMC/UcUxK8Lq0zEJqEV0z4iDR1c5wRIs2DmbjsU1QcCKGWXtF2HpIBhM+IhI0xgPycRcN1dhLwSHNJetZTJWAs2XH/VkSscSxtjLNzRf0NOztW/mfyRjiYGpVYPPC2gmituI9aGPKzhASGWCEvwjjO1b4pWBJ7aygm711BEk9yC541afA2u+gx12YzLXsbV/Rz3DSbvfcwc38vt1vHZUonpQY6b7npPTksymKHptnshj9s6oPLxKm/Yd9Jg61KSbfcScddJWb21lfKxyb4z8BsLTO8FdKzRUDm4ST3Lzhg8zYXmJ3IZPmN/lluyB2RMVKgo2yMw7DfyiM0CsvzysWaKZSXagp4WeNVbBQgrOPbEsBe3CdDo5vupoQAwF7LfcB2rCDnM+RinTY090O1sgN4r8gtjOheVecxk9O7uzGmP9ApL9lPBXfdsG+JBnU/T1Gok52hQ5Ys69GQGeP2b5OWnOAFk2k2M4C5V8wNRP3CBQlOPj+gm15XNnouVI5t2fl2gOuFiqhHpqQGUoT3+YtMwBKw2vUVqcVLOP2wGxIEyjmv5qZJb3qYcWCkJQ/D9C9YjSo6r2FpxvRVZarSat5Zka9tuHeQPPyTgRvonGsu2q3WEj2wxzfXnMNkwlmPLDpl09QyrodPilIQ6VBpG2me409eQudpsJ50y/cXT4soVC00GfgG6W+WmUYMgKbEZpkTeqlASiShPiPfCwHs++sJPBqFRSPjDP12nWgxEA9T0KhTDYi94XIrg8gmmkTx3Ws2ubFJcLD39xBcFbpiCOtRcunmIq8aYnXvfV7p/+79C3mI5VA9lzkRclDVmTvQ/NwShbj7hLvUi/qPu956H5iOgv74NxuIpSnXgCITf94iL/SXnWEvlCckaBqI7Hl3tDHt5kM/ufPtQ3q3hDVfgW+AGeeSbIxY6fLu5lIKPWZuzX0Khr6BwiMgun9SyaQRhORkD5vx0viQ1nugN6qRahB9y05G5qXowiXYCOZhKg+qKDbBnb14mIAO2zJwtPLNnVEBi9HaQs6Ik=
  
#artifacts:
#  - path: 'output/Release/bin/*/*.nupkg'
#  - path: 'output/TestResults/*.trx' # If we fail the pipeline on test stage, how do we save test reports? do we even need that, since all output is 

init:
  - sh: git config --global core.autocrlf false
#  - ps: Update-AppveyorBuild -Version "0.0.$env:appveyor_build_number-$($env:appveyor_repo_commit.substring(0,7))"
  - sh: appveyor UpdateBuild -Version "build-${APPVEYOR_REPO_COMMIT:0:8}-${APPVEYOR_BUILD_NUMBER}"
install:
#   - sh: git submodule update --init --recursive
  - sh: 'mkdir "${APPVEYOR_BUILD_FOLDER}/git"'
  - sh: 'find "${APPVEYOR_BUILD_FOLDER}" -mindepth 1 -maxdepth 1 -not -name "git" -not -name "nuget-package-dir" -not -name "docker-images" -not -name "v4-ref-assemblies" -exec mv -t "${APPVEYOR_BUILD_FOLDER}/git" {} +'
  - sh: '"${APPVEYOR_BUILD_FOLDER}/git/${CI_FOLDER}/download-net40-ref-assemblies.sh" "${APPVEYOR_BUILD_FOLDER}/v4-ref-assemblies"'

# AppVeyor does not have docker images cache support, so use the normal cache for that.
#  - sh: 'mkdir -p "${APPVEYOR_BUILD_FOLDER}/docker-images"'
#  - sh: 'sudo cp -R "${APPVEYOR_BUILD_FOLDER}/docker-images/." /var/lib/docker'
#  - sh: 'sudo chown -R root:root /var/lib/docker'
#  - sh: 'sudo chmod u=rwX,g=,o= /var/lib/docker'

build_script:
  - sh: '"${APPVEYOR_BUILD_FOLDER}/git/${CI_FOLDER}/build.sh"'
  - sh: 'sudo chown -R `id -u` "${APPVEYOR_BUILD_FOLDER}/${RELATIVE_CS_OUTPUT}"'
  - sh: 'sudo chown -R `id -u` "${APPVEYOR_BUILD_FOLDER}/${RELATIVE_NUGET_PACKAGE_DIR}"'

test_script:
  - sh: '"${APPVEYOR_BUILD_FOLDER}/git/${CI_FOLDER}/test.sh" "${APPVEYOR_BUILD_FOLDER}/git/${CI_FOLDER}/appveyor/add_tests.sh"'
  - sh: 'sudo chown -R `id -u` "${APPVEYOR_BUILD_FOLDER}/${RELATIVE_CS_OUTPUT}"'
  - sh: 'sudo chown -R `id -u` "${APPVEYOR_BUILD_FOLDER}/${RELATIVE_NUGET_PACKAGE_DIR}"'

after_test:
  - sh: '"${APPVEYOR_BUILD_FOLDER}/git/${CI_FOLDER}/package.sh" "${APPVEYOR_BUILD_FOLDER}/git/${CI_FOLDER}/appveyor/upload_packages.sh"'
  - sh: 'sudo chown -R `id -u` "${APPVEYOR_BUILD_FOLDER}/${RELATIVE_CS_OUTPUT}"'
  - sh: 'sudo chown -R `id -u` "${APPVEYOR_BUILD_FOLDER}/${RELATIVE_NUGET_PACKAGE_DIR}"'
  
deploy_script:
  - sh: '${APPVEYOR_BUILD_FOLDER}/git/${CI_FOLDER}/deploy.sh'
  
after_deploy:
# Remember to copy docker images to this folder for cache support
#  - sh: 'sudo systemctl stop docker'
#  - sh: 'sudo cp -R /var/lib/docker/. "${APPVEYOR_BUILD_FOLDER}/docker-images"'
#  - sh: 'sudo find "${APPVEYOR_BUILD_FOLDER}/docker-images" -mindepth 1 -maxdepth 1 -not -name "image" -not -name "overlay2" -exec rm -rf {} +'
#  - sh: 'sudo chown -R `id -u`:`id -u` "${APPVEYOR_BUILD_FOLDER}/docker-images"'
