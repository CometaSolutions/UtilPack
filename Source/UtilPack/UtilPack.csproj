<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <!-- TODO Add net40 back once there exists a way to build for .NET Desktop 4.0 on .NET Core environment (the reference assemblies for 4.0 do not exist on dotnet.myget.org) -->
    <TargetFrameworks>netstandard1.0;netstandard1.1;netstandard1.5;netstandard1.6;net45</TargetFrameworks>
  </PropertyGroup>

  <PropertyGroup>
    <TreatWarningsAsErrors>True</TreatWarningsAsErrors>
    <TreatSpecificWarningsAsErrors />
    <LangVersion>latest</LangVersion>
    <GeneratePackageOnBuild Condition=" '$(Configuration)' == 'Release' ">true</GeneratePackageOnBuild>
  </PropertyGroup>
  
  <PropertyGroup>
    <DefineConstants Condition=" '$(TargetFramework)' == 'netstandard1.0' or '$(TargetFramework)' == 'netstandard1.1' or '$(TargetFramework)' == 'netstandard1.5' or '$(TargetFramework)' == 'netstandard1.6' ">$(DefineConstants);IS_NETSTANDARD</DefineConstants>
  </PropertyGroup>

  <ItemGroup Condition=" '$(TargetFramework)' != 'net40' ">
    <PackageReference Include="System.Threading.Tasks.Extensions" Version="4.3.0" />
    <PackageReference Include="System.ValueTuple" Version="4.3.0" />
  </ItemGroup>

  <ItemGroup Condition=" '$(TargetFramework)' == 'net40' ">
    <PackageReference Include="Theraot.Core" Version="1.0.5" />
  </ItemGroup>
  
  <!-- Assembly information stuff -->
  <PropertyGroup>
    <VersionPrefix>1.6.0</VersionPrefix>
    <VersionSuffix></VersionSuffix>
    <AssemblyTitle>UtilPack.Common</AssemblyTitle>
    <Description>Library containing useful and generic methods, which are missing from one or more BCL.</Description>
  </PropertyGroup>
   
  <!-- NuGet package stuff -->
  <PropertyGroup>
    <PackageId>$(AssemblyName)</PackageId>
    <PackageVersion>$(VersionPrefix)</PackageVersion>
    <PackageVersion Condition=" '$(VersionSuffix)' != ''">$(PackageVersion)-$(VersionSuffix)</PackageVersion>
    <PackageReleaseNotes>Miscellaneous fixes and improvements.</PackageReleaseNotes>
    <PackageTags>bcl utility binary serialization collection extensions</PackageTags>
    <Title>Utility Package for CLR</Title>
  </PropertyGroup>
  
  <Import Project="$(CIPropsFilePath)" Condition=" '$(CIPropsFilePath)' != '' and Exists('$(CIPropsFilePath)') " />
  
  <ItemGroup Condition=" '$(IsCIBuild)' == 'true' ">
    <PackageReference Include="runtime.alpine.3.6-x64.Microsoft.NETCore.ILDAsm" Version="2.2.0-preview1-26425-01" ExcludeAssets="All" PrivateAssets="All" />
    <PackageReference Include="runtime.alpine.3.6-x64.Microsoft.NETCore.ILAsm" Version="2.2.0-preview1-26425-01" ExcludeAssets="All" PrivateAssets="All" />
  </ItemGroup>

  <!-- IL CODE SUPPORT STARTS -->
  <PropertyGroup>
    <ILGenerationT4File>$(MSBuildProjectDirectory)/GenerateILFile.tt.msbuild</ILGenerationT4File>
    <ILGenerationOutFile>$(MSBuildProjectDirectory)/IL/AdditionalIL.$(TargetFramework).il</ILGenerationOutFile>
    <ILGenerationOutDir>$([System.IO.Path]::GetDirectoryName($(ILGenerationOutFile)))</ILGenerationOutDir>
  </PropertyGroup>
  
  <!-- Including code in .il files to final assembly -->
  <Target Name="DoILCompiling" AfterTargets="Compile" Condition=" '$(Configuration)' == 'Release' ">
    <PropertyGroup>
      <ILTargetsToCall>GenerateILCodeFiles;ILInitialize;ILDecompile;ILCompile</ILTargetsToCall>
      <ILTargetsToCall Condition=" '$(DocumentationFile)' != ''">$(ILTargetsToCall);GenerateILDocFiles</ILTargetsToCall>
    </PropertyGroup>
    
    <!-- <CallTarget Targets="$(ILTargetsToCall)" /> -->
  </Target>

  <Target Name="GenerateILCodeFiles" Inputs="$(ILGenerationT4File)" Outputs="$(ILGenerationOutFile)">
    <PropertyGroup>
      <T4Command>"$(MSBuildExtensionsPath)\..\Common7\IDE\TextTransform.exe" -out "$(ILGenerationOutFile)" -a "!!TFM!$(TargetFramework)" "$(ILGenerationT4File)"</T4Command>
    </PropertyGroup>
    <MakeDir Condition="!Exists($(ILGenerationOutDir))" Directories="$(ILGenerationOutDir)" />
    <Exec Command="$(T4Command)" />
  </Target>
  
  <UsingTask TaskName="MergeXMLDocFiles" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <Target ParameterType="System.String" />
      <Items ParameterType="Microsoft.Build.Framework.ITaskItem[]" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Xml" />
      <Reference Include="System.Xml.Linq" />
      
      <Using Namespace="System.IO" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Using Namespace="System.Xml.Linq" />
      <Using Namespace="System.Xml.XPath" />

      <Code Type="Fragment" Language="cs">
        <![CDATA[
       var targetLocation = this.Target;
       var targetDocument = XDocument.Load(targetLocation);
       var members = targetDocument.XPathSelectElement("/doc/members");
       if (members == null)
       {
         throw new Exception("Failed to find members element in target XML documentation file.");
       }
       
       foreach(var item in this.Items)
       {
         var docFragment = XDocument.Load(item.GetMetadata("FullPath"));
         members.Add(docFragment.XPathSelectElements("/doc/members/member"));
       }
       
       using(var fs = File.Open(targetLocation, FileMode.Create, FileAccess.Write, FileShare.None))
       {
         targetDocument.Save(fs);
       }
     ]]>
      </Code>
    </Task>
  </UsingTask>
  
  <Target Name="GenerateILDocFiles">
    <PropertyGroup>
      <ILDocumentFile>$(ILGenerationOutDir)/AdditionalIL.$(TargetFramework).xml</ILDocumentFile>
      <T4Command>"$(MSBuildExtensionsPath)\..\Common7\IDE\TextTransform.exe" -out "$(ILDocumentFile)" -a "!!TFM!$(TargetFramework)" "$(MSBuildProjectDirectory)/GenerateILDocs.tt.msbuild"</T4Command>
    </PropertyGroup>
    <Exec Command="$(T4Command)" />
    <MergeXMLDocFiles Target="$(DocumentationFile)" Items="$(ILDocumentFile)" />
  </Target>
  
  <Target Name="ILInitialize">
    <ItemGroup>
      <IL Include="$(ILGenerationOutFile)" />
    </ItemGroup>
    <PropertyGroup>
      <ILFile>@(IntermediateAssembly->'%(RootDir)%(Directory)%(Filename).il', ' ')</ILFile>
      <ILResourceFile>@(IntermediateAssembly->'%(RootDir)%(Directory)%(Filename).res', ' ')</ILResourceFile>
    </PropertyGroup>
  </Target>
  
  <Target Name="ILDecompile" Inputs="@(IntermediateAssembly)" Outputs="$(ILFile)" Condition=" Exists ( @(IntermediateAssembly) ) ">
    <GetFrameworkSdkPath>
      <Output TaskParameter="Path" PropertyName="FrameworkSdkPath" />
    </GetFrameworkSdkPath>
    <ItemGroup Condition=" '$(OS)' != 'Unix' ">
      <MatchingILDasmFile Include="$(FrameworkSdkPath)\bin\*\ildasm.exe" />
    </ItemGroup>
    <PropertyGroup Condition=" '$(OS)' != 'Unix' ">
      <ILDasm>%(MatchingILDasmFile.Identity)</ILDasm>
      <ILDasm Condition="!Exists('$(ILDasm)')">$(FrameworkSdkPath)\bin\NETFX 4.0 Tools\ildasm.exe</ILDasm>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(OS)' == 'Unix' ">
      <ILDasm>ildasm</ILDasm>
    </PropertyGroup>
    <PropertyGroup>
      <ILDasm>"$(ILDasm)" /utf8 /nobar</ILDasm>
      <!-- Release mode has no debug symbols. -->
      <ILDasm Condition=" '$(Configuration)' == 'Debug' ">$(ILDasm) /linenum</ILDasm>
      <ILDasm>$(ILDasm) /output:"$(ILFile)" @(IntermediateAssembly->'"%(FullPath)"', ' ')</ILDasm>
    </PropertyGroup>
    <Exec Command="$(ILDasm)" />
    <ItemGroup>
      <FileWrites Include="$(ILFile)" />
      <FileWrites Include="$(ILResourceFile)" />
    </ItemGroup>
    <Delete Files="@(IntermediateAssembly)" />
  </Target>
  <Target Name="ILCompile" Inputs="@(IL)" Outputs="@(IntermediateAssembly)">
    <GetFrameworkPath>
      <Output TaskParameter="Path" PropertyName="FrameworkPath" />
    </GetFrameworkPath>
    <PropertyGroup>
      <ILAsm>"$(FrameworkPath)\ilasm.exe" /nologo /quiet /highentropyva+ /output:@(IntermediateAssembly->'"%(FullPath)"', ' ')</ILAsm>
      <ILAsm Condition=" '$(FileAlignment)' != '' ">$(ILAsm) /alignment=$(FileAlignment)</ILAsm>
      <ILAsm Condition=" '$(BaseAddress)' != '' ">$(ILAsm) /base=$(BaseAddress)</ILAsm>
      <ILAsm Condition=" '$(OutputType)' == 'Library' ">$(ILAsm) /dll</ILAsm>
      <ILAsm Condition=" '$(DebugType)' == 'pdbonly' ">$(ILAsm) /pdb</ILAsm>
      <ILAsm Condition=" '$(DebugType)' == 'full' ">$(ILAsm) /debug</ILAsm>
      <ILAsm Condition=" '$(Optimize)' == 'true' ">$(ILAsm) /optimize</ILAsm>
      <ILAsm Condition=" '$(Platform)' == 'x64' ">$(ILAsm) /pe64 /x64</ILAsm>
      <ILAsm Condition=" '$(Platform)' == 'Itanium' ">$(ILAsm) /pe64 /itanium</ILAsm>
      <ILAsm Condition=" '$(AssemblyOriginatorKeyFile)' != '' ">$(ILAsm) /key:"$(AssemblyOriginatorKeyFile)"</ILAsm>
      <ILAsm Condition=" Exists ( '$(ILResourceFile)' ) ">$(ILAsm) /resource:"$(ILResourceFile)"</ILAsm>
      <ILAsm Condition=" Exists ( '$(ILFile)' ) ">$(ILAsm) "$(ILFile)"</ILAsm>
      <ILAsm Condition=" '$(TargetPlatformIdentifier)' == 'WindowsPhoneApp' ">$(ILAsm) /ssver:6.00</ILAsm>
    </PropertyGroup>
    <Copy SourceFiles="@(IL)" DestinationFolder="$(IntermediateOutputPath)" />
    <ItemGroup>
      <ILCopied Include="@(IL)">
        <ActualPath>$(IntermediateOutputPath)%(IL.Filename)%(IL.Extension)</ActualPath>
      </ILCopied>
    </ItemGroup>
    <Exec Command="$(ILAsm) @(ILCopied->'&quot;%(ActualPath)&quot;', ' ')" />
  </Target>
</Project>