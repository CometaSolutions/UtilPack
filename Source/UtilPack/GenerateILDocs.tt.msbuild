<#@ template hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#

//
// Copyright 2017 Stanislav Muhametsin. All rights Reserved.
//
// Licensed  under the  Apache License,  Version 2.0  (the "License");
// you may not use  this file  except in  compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed  under the  License is distributed on an "AS IS" BASIS,
// WITHOUT  WARRANTIES OR CONDITIONS  OF ANY KIND, either  express  or
// implied.
//
// See the License for the specific language governing permissions and
// limitations under the License. 

#>
<doc>
   <members>
      <member name="T:UtilPack.SizeOf">
        <summary>
           Provides methods that describe sizes of various things during runtime.
        </summary>
      </member>
      <member name="M:UtilPack.SizeOf.Type``1">
        <summary>
          Gets the runtime size of the given type, in bytes.
        </summary>
        <typeparam name="TType">The type to calculate size of.</typeparam>
      </member>
      <member name="M:E_UtilPack.InvokeEventIfNotNull``1(``0,System.Action{``0})">
         <summary>
            Invokes the event if it is non-<c>null</c>.
         </summary>
         <typeparam name="TDelegate">The type of the event.</typeparam>
         <param name="del">The value of the event field.</param>
         <param name="invoker">
            The lambda to invoke non-<c>null</c> event.
         </param>
         <returns>
            <c>true</c> if <paramref name="del" /> was non-<c>null</c>; <c>false</c> otherwise.
         </returns>
      </member>
      <member name="M:E_UtilPack.InvokeAllEventHandlers``1(``0,System.Action{``0},System.Boolean)">
         <summary>
            Invokes all event handlers one by one, even if some of them throw exception.
         </summary>
         <typeparam name="TDelegate">The type of the event.</typeparam>
         <param name="del">The value of the event field.</param>
         <param name="invoker">
            The lambda to invoke non-<c>null</c> event.
         </param>
         <param name="throwExceptions">Whether this method should throw exceptions that are thrown by event handlers.</param>
         <returns>
            <c>true</c> if <paramref name="del" /> was non-<c>null</c>; <c>false</c> otherwise.
         </returns>
         <exception cref="T:System.AggregateException">
            If <paramref name="throwExceptions" /> is <c>true</c> and any of the event handler throws an exception. The exception(s) will be given to the <see cref="T:System.AggregateException" /> constructor.
         </exception>
         <remarks>
            If <paramref name="throwExceptions" /> is <c>true</c> and first exception is thrown by last event handler, then that exception is re-thrown instead of throwing <see cref="T:System.AggregateException" />.
         </remarks>
      </member>
      <member name="M:E_UtilPack.InvokeAllEventHandlers``1(``0,System.Action{``0},System.Exception[]@)">
         <summary>
            Invokes all event handlers one by one, even if some of them throw exception.
         </summary>
         <typeparam name="TDelegate">The type of the event.</typeparam>
         <param name="del">The value of the event field.</param>
         <param name="invoker">
            The lambda to invoke non-<c>null</c> event.
         </param>
         <param name="occurredExceptions">
            This will hold all exceptions thrown by event handlers. Will be <c>null</c> if no exceptions were thrown.
         </param>
         <returns>
            <c>true</c> if <paramref name="del" /> was non-<c>null</c>; <c>false</c> otherwise.
         </returns>
      </member>
      <member name="T:UtilPack.DelegateMultiplexer`2">
         <summary>This class implements <see cref="T:UtilPack.Multiplexer`2"/> with <see cref="T:System.Delegate" /> as constraint for values.</summary>
         <typeparam name="TKey">The key type.</typeparam>
         <typeparam name="TDelegate">The type of delegate.</typeparam>
         <remarks>
            This class is very useful when one multiplexes a single event, e.g. when having one <c>PropertyChanged</c> event based on property name, but allowing to register to events fired on specific property change.
            In that case, the <typeparamref name="TKey"/> would be <see cref="T:System.String"/> and <typeparamref name="TDelegate"/> would be the type of event.
         </remarks>
      </member>
      <member name="M:UtilPack.DelegateMultiplexer`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
         <summary>Creates a new instance of <see cref="T:UtilPack.DelegateMultiplexer`2"/> with optional custom equality comparer for keys.</summary>
         <param name="equalityComparer">The optional custom equality comparer for keys.</param>
      </member>
      <member name="M:UtilPack.DelegateMultiplexer`2.Combine(`1,`1)">
         <inheritdoc />
      </member>
      <member name="M:UtilPack.DelegateMultiplexer`2.Remove(`1,`1)">
         <inheritdoc />
      </member>
   </members>
</doc>
